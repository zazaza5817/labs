# Функция выравнивания текста по левому краю.
# Она принимает список строк в качестве входных данных,
# удаляет пробелы в начале и конце каждой строки,
# а затем возвращает список обновленных строк.
def align_left(text):
    return [line.strip().lstrip() for line in text]


# Функция выравнивания текста по правому краю.
# Принимает список строк в качестве входных данных,
# определяет максимальную длину строки в этом списке,
# затем удаляет пробелы в начале и конце каждой строки,
# выравнивает каждую строку по правому краю с использованием максимальной длины,
# и возвращает список обновленных строк.
def align_right(text):
    max_length = max(len(line) for line in text)
    return [line.strip().rjust(max_length) for line in text]


# Функция выравнивания текста по центру.
# Принимает список строк в качестве входных данных,
# определяет максимальную длину строки в этом списке,
# затем удаляет пробелы в начале и конце каждой строки,
# выравнивает каждую строку по центру с использованием максимальной длины,
# и возвращает список обновленных строк.
def align_center(text):
    max_length = max(len(line) for line in text)
    return [f"{line.strip():^{max_length}s}" for line in text]


# Функция замены слова в тексте.
# Принимает список строк и два слова в качестве входных данных,
# затем заменяет каждое вхождение старого слова на новое в каждой строке,
# печатает каждую обновленную строку,
# и возвращает обновленный список строк.
def replace_word(text, old_word, new_word):
    for i in range(len(text)):
        text[i] = text[i].replace(old_word, new_word)
        print(text[i])
    return text


# Определяем функцию, которая заменяет арифметические операции в строке
def replace_arithmetic_operations(s):
    s = "\n".join(s)
    # Создаем список чисел от 0 до 9 в виде строк
    numbers = list(map(str, range(10)))
    i = 0
    # Создаем пустой список для хранения позиций чисел в строке
    number_positions = []
    # Проходимся по строке
    while i < len(s):
        # Если текущий символ - это число
        if s[i] in numbers:
            # Запоминаем начальную позицию числа
            start_index = i
            # Продолжаем проход по строке, пока не встретим не число
            while i < len(s) and s[i] in numbers:
                i += 1
            else:
                # Запоминаем конечную позицию числа
                end_index = i - 1
                # Добавляем начальную и конечную позиции числа в список
                number_positions.append((start_index, end_index))
        i += 1

    # Создаем пустой список для хранения арифметических операций
    operations = []
    # Проходимся по списку позиций чисел
    for i in range(len(number_positions)):
        # Получаем текущую позицию
        position = number_positions[i]
        j = position[1] + 1
        # Пропускаем пробелы после числа
        while j < len(s) and s[j] == " ":
            j += 1
        # Если следующий символ не конец строки
        if j != len(s):
            # Если следующий символ '+'
            if s[j] == "+":
                # Запоминаем операцию как 1
                operation = 1
            # Если следующий символ '-'
            elif s[j] == "-":
                # Запоминаем операцию как -1
                operation = -1
            else:
                # Если следующий символ ни '+', ни '-', пропускаем эту операцию
                continue
            # Переходим к следующему символу
            j += 1
            # Пропускаем пробелы после операции
            while j < len(s) and s[j] == " ":
                j += 1

            # Если следующее число начинается сразу после операции
            if i + 1 < len(number_positions) and number_positions[i + 1][0] == j:
                # Запоминаем операцию и индекс следующего числа
                operations.append(((i, 1), (i + 1, operation)))

    # Создаем пустой список для хранения сложных операций
    complex_operations = []
    # Если есть операции
    if operations:
        # Добавляем первую операцию в список сложных операций
        complex_operations = [[operations[0][0], operations[0][1]]]
        i = 1
        # Проходимся по остальным операциям
        while i < len(operations):
            # Если текущая операция относится к последней сложной операции
            if operations[i][0][0] == complex_operations[-1][-1][0]:
                # Добавляем операцию в последнюю сложную операцию
                complex_operations[-1].append(operations[i][1])
            else:
                # Если текущая операция не относится к последней сложной операции, начинаем новую сложную операцию
                complex_operations.append([operations[i][0], operations[i][1]])
            i += 1

    # Создаем пустой список для хранения результатов
    results = []
    # Проходимся по сложным операциям
    for operation in complex_operations:
        # Инициализируем результат как 0
        result = 0
        # Проходимся по операциям в текущей сложной операции
        for action in operation:
            # Получаем позицию числа для текущей операции
            number = number_positions[action[0]]
            # Добавляем число к результату, умноженное на операцию
            result += int(s[number[0]:number[1] + 1]) * action[1]
        # Добавляем результат, начальную и конечную позиции в список результатов
        results.append((result, number_positions[operation[0][0]][0], number_positions[operation[-1][0]][1]))

    # Если есть результаты
    if results:
        # Инициализируем выходную строку с частью входной строки до первого результата
        out_s = s[:results[0][1]]
        # Проходимся по результатам
        for i in range(len(results)):
            # Добавляем результат в выходную строку
            result = results[i]
            out_s += str(result[0])
            # Если есть следующий результат после текущего
            if i + 1 < len(results):
                # Добавляем часть входной строки между текущим и следующим результатом в выходную строку
                out_s += s[results[i][2] + 1:results[i + 1][1]]
        # Добавляем часть входной строки после последнего результата в выходную строку
        out_s += s[results[-1][2] + 1:]
    else:
        # Если результатов нет, возвращаем входную строку без изменений
        out_s = s
    # Возвращаем выходную строку
    return out_s.split("\n")


def main():
    text = [
        "— Потрудитесь мне сказать что-нибудь о Крестовом походе Людовика Святого, — сказал он,",
        "покачиваясь на стуле и задумчиво глядя себе под ноги. — Сначала вы мне скажете о причинах,",
        "побудивших короля французског1-3о взять крест, — сказал он, поднимая брови и указывая пальцем на",
        "чернильницу, — потом объясните мне общие характеристические черты этого похода, — прибавил он,",
        "делая всей кистью движение такое, как будто хотел поймать что-нибудь, — и, наконец, влияние",
        "этого похода на европейские государства вообще, — сказал он, ударяя тетрадями по левой стороне",
        "стола, — и на французское королевство в особенности, — заключил он, ударяя по правой стороне",
        "стола и склоняя голову направо."
    ]
    print("\n".join(text))
    while True:
        print("1. Выровнять текст по левому краю.\n"
              "2. Выровнять текст по правому краю.\n"
              "3. Выровнять текст по ширине.\n"
              "4. Удалить слово\n"
              "5. Заменить все вхождения заданного слова на другое: \n"
              "6. Заменить все арифметические операции сложения и вычитания на их результат")
        n = int(input("Выберите пункт меню: "))
        if 0 < n < 8:
            if n == 1:
                text = align_left(text)
            elif n == 2:
                text = align_right(text)
            elif n == 3:
                text = align_center(text)
            elif n == 4:
                for_remove = input("Введите слово для удаления: ")
                text = replace_word(text, for_remove, "")
            elif n == 5:
                old_string = input("Введите слово которое необходимо заменить: ")
                new_string = input("Введите слово на которое необходимо заменить: ")
                text = replace_word(text, old_string, new_string)
            elif n == 6:
                text = replace_arithmetic_operations(text)
            print("\n".join(text))
        else:
            print("Элемента с таким номером нет в меню")


if __name__ == "__main__":
    main()
